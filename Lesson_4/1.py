"""
1. Проанализировать скорость и сложность одного любого алгоритма,
разработанных в рамках домашнего задания первых трех уроков.
Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.
"""
"""Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
Количество элементов (n) вводится с клавиатуры.
"""

import timeit

def summa(k, n):
    if n == 1:
        return k
    elif n > 1:
        return k + summa(k / (-2), n - 1)



n = int(input("Введите количество элементов ряда: "))
k = 1
print(summa(k, n))

print(timeit.timeit('summa(k, n)', setup='from __main__ import summa, k, n'))
# Сложность О(n), время выполнения(n = 100) = 25.945184977


def summ(n):
    k = 1
    summ = 0
    while n > 0:
        summ += k
        k /= (-2)
        n -= 1
    return summ
n = int(input("Введите количество элементов ряда: "))
print(summ(n))
print(timeit.timeit('summ(n)', setup='from __main__ import summ, n'))
# Сложность О(n),  время выполнения(n = 100) = 14.894072578

# Вывод: время выполнения цикла почти в два раза быстрее выполнения рекурсии